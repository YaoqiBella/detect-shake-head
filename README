# Detect users' command through shaking heads or hands.

If user turns head/hand to left, there will be an arrow moving
to the left. And if user turns head/hand to the right, there
will be an arrow moving to the right.

The algorithm consists of two steps:

- **Step 1**: Estimate the (quantized) position of moving objects.
- **Step 2**: Estimate the issued command by analyzing the output of step 1.


## Step 1: Estimate the position of moving objects.
For this step, a slide window is applied to the input frames. Several methods are applied and the result is returned using majority vote rule.

We quantized the horizontal axis as three regions. 

| 40%      | 20%     | 40%     |
|----------|----------|----------|
|  0          |  1          |  2         |

The width of Region 0 is 40% of the screen length.
The width of Region 1 is  20% of the screen length.
The width of Region 3 is  40% of the screen length.


### Method 1

Detect moving edge through combining frame difference method and edge
detection method. The position of the center of the moving edge is returned.

The steps are:

1. For every two adjacent frame in the buffer, calculate their frame
difference.
2. Calculate the sum of absolute value of all frame difference in step 1.
3. Detect edge of the last frame in the buffer using a canny edge detector.
4. Calculate bitwise_and of the result in step 2 and step 3.
5. Calculate the center of all points in frame generated by step 4. Return the position of the quantized position of the center. 

### Method 2

1. For every two adjacent frame in the buffer, calculate their frame
difference.
2. Calculate the sum of absolute value of all frame difference in step 1.
3. For each region, calculate its motion strength. Returns the region with highest motion strength. 


We applied method 1 with two different buffer size (4 and 8), and applied method 2 with buffer size 8. As long as at least two method reports the same position, we will return the position. Otherwise, we will return -1.

## Step 2: Estimate the issued command
We know the following correspondence relationship of sequences and commands.

- ...1 1 0 0... -> LEFT
- ...1 1 2 2... -> RIGHT
- ...0 0 2 2... -> RIGHT
- ...2 2 0 0 --> LEFT

We first reduce the noise of the sequence, and then try to detect the pattern described above.

